# -*- coding: utf-8 -*-
"""miniGoogleNet_HPML_v1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rHJAmqe9nXwXNrEFvJlxFV0eNIeLBUud
"""

import torch
from torch import nn
from torch.utils.data import DataLoader
from torchvision import datasets
from torchvision.transforms import ToTensor
import torch.nn.functional as F

import time

training_data = datasets.CIFAR10(
    root="data",
    train=True,
    download=True,
    transform=ToTensor(),
)

test_data = datasets.CIFAR10(
    root="data",
    train=False,
    download=True,
    transform=ToTensor(),
)

print(len(training_data))
print(training_data[0][0].shape)

batch_size = 64
train_dataloader = DataLoader(training_data, batch_size=batch_size, num_workers=4)
test_dataloader = DataLoader(test_data, batch_size=batch_size, num_workers=4)

print(len(train_dataloader))
for X,y in train_dataloader:
  print(X.shape)
  print(y.shape)
  # print(X[0])
  break

device = "cuda" if torch.cuda.is_available() else "cpu"
print(f"Using {device} device")

class Conv_Module(nn.Module):  
  def __init__(self, c_in, c_out, k, s, p=0): # kernel size, stride and padding
    super(Conv_Module, self).__init__()
    self.a = nn.Sequential(
        nn.Conv2d(c_in, c_out, kernel_size=k, stride=s, padding=p),
        nn.BatchNorm2d(c_out),
        nn.ReLU()
    )

  def forward(self, x):
    return self.a(x)

class Inception_Module_v0(nn.Module):
  def __init__(self, c_in, c1_out, c3_out):
    super(Inception_Module_v0, self).__init__()
    self.c1_out = c1_out
    self.c3_out = c3_out
    self.a1 = Conv_Module(c_in, c1_out, 1, 1)
    self.a2 = Conv_Module(c_in, c3_out, 3, 1, 1)
    # self.a3 = Conv_Module(c_in, int(c1_out/2), 3, 1, 1)
    # self.a4 = Conv_Module(int(c1_out/2), int(c1_out/2), 3, 1, 1)
  
  def forward(self, x):
    y1 = self.a1(x)
    # print("1",y1.shape)
    y2 = self.a2(x)
    # y3 = self.a3(x)
    # y4 = self.a4(y3)
    # print("2",y2.shape)
    # print("{}+{}={}".format(self.c1_out, self.c3_out, torch.cat([y1,y2], 1).shape))
    return torch.cat([y1,y2], 1)

class Inception_Module_v1(nn.Module):
  def __init__(self, c_in, c1_out, c3_out):
    super(Inception_Module_v1, self).__init__()
    self.c1_out = c1_out
    self.c3_out = c3_out
    self.a1 = Conv_Module(c_in, int(c1_out/2), 1, 1)
    self.a2 = Conv_Module(c_in, c3_out, 3, 1, 1)
    self.a3 = Conv_Module(c_in, int(c1_out/2), 5, 1, 2)
    # self.a4 = Conv_Module(int(c1_out/2), int(c1_out/2), 3, 1, 1)
  
  def forward(self, x):
    y1 = self.a1(x)
    # print("1",y1.shape)
    y2 = self.a2(x)
    y3 = self.a3(x)
    # y4 = self.a4(y3)
    # print("2",y2.shape)
    # print("{}+{}={}".format(self.c1_out, self.c3_out, torch.cat([y1,y2], 1).shape))
    return torch.cat([y1,y2,y3], 1)

class Inception_Module_v2(nn.Module):
  def __init__(self, c_in, c1_out, c3_out):
    super(Inception_Module_v2, self).__init__()
    self.c1_out = c1_out
    self.c3_out = c3_out
    self.a1 = Conv_Module(c_in, int(c1_out/2), 1, 1)
    self.a2 = Conv_Module(c_in, c3_out, 3, 1, 1)
    self.a3 = Conv_Module(c_in, int(c1_out/2), 3, 1, 1)
    self.a4 = Conv_Module(int(c1_out/2), int(c1_out/2), 3, 1, 1)
  
  def forward(self, x):
    y1 = self.a1(x)
    # print("1",y1.shape)
    y2 = self.a2(x)
    y3 = self.a3(x)
    y4 = self.a4(y3)
    # print("2",y2.shape)
    # print("{}+{}={}".format(self.c1_out, self.c3_out, torch.cat([y1,y2], 1).shape))
    return torch.cat([y1,y2,y4], 1)

class Downsample_Module(nn.Module):
  def __init__(self, c_in, c_out):
    super(Downsample_Module, self).__init__()
    self.a1 = Conv_Module(c_in, c_out, 3, (2,2))
    self.a2 = nn.MaxPool2d(kernel_size=3, stride=(2,2))

  def forward(self, x):
    y1 = self.a1(x)   
    y2 = self.a2(x)
    # print("{} downsample to {}".format(x.shape, torch.cat([y1,y2], 1).shape))
    return torch.cat([y1,y2], 1)

class miniGoogleNet_v0(nn.Module):
  def __init__(self):
    super(miniGoogleNet_v0, self).__init__()
    self.a = Conv_Module(3, 96, 3, 1, 1)

    self.b1 = Inception_Module_v0(96, 32, 32)
    self.b2 = Inception_Module_v0(32+32, 32, 48)
    self.b3 = Downsample_Module(32+48, 80)  # output channels 80+(32+48)

    self.c1 = Inception_Module_v0(80+32+48, 112, 48)
    self.c2 = Inception_Module_v0(112+48, 96, 64)
    self.c3 = Inception_Module_v0(96+64, 80, 80)
    self.c4 = Inception_Module_v0(80+80, 48, 96)
    self.c5 = Downsample_Module(48+96, 96)

    self.d1 = Inception_Module_v0(96+48+96, 176, 160)
    self.d2 = Inception_Module_v0(176+160, 176, 160)
    self.d3 = nn.AvgPool2d(kernel_size=7) # output shape [64, 176+160, 1, 1]
    self.d4 = nn.Sequential(
        nn.Flatten(),
        nn.Linear(176+160, 10)
    )
    
  def forward(self, x):
    x = self.a(x)
    # print(x.shape)
    x = self.b1(x)
    # print(x.shape)
    x = self.b2(x)
    # print(x.shape)
    x = self.b3(x)
    # print(x.shape)
    x = self.c1(x)
    # print(x.shape)
    x = self.c2(x)
    # print(x.shape)
    x = self.c3(x)
    # print(x.shape)
    x = self.c4(x)
    # print(x.shape)
    x = self.c5(x)
    # print(x.shape)
    x = self.d1(x)
    # print(x.shape)
    x = self.d2(x)
    # print(x.shape)
    x = self.d3(x)
    # print(x.shape)
    x = self.d4(x)
    # print(x.shape)
    # print(x)
    return x

class miniGoogleNet_v1(nn.Module):
  def __init__(self):
    super(miniGoogleNet_v1, self).__init__()
    self.a = Conv_Module(3, 96, 3, 1, 1)

    self.b1 = Inception_Module_v1(96, 32, 32)
    self.b2 = Inception_Module_v1(32+32, 32, 48)
    self.b3 = Downsample_Module(32+48, 80)  # output channels 80+(32+48)

    self.c1 = Inception_Module_v1(80+32+48, 112, 48)
    self.c2 = Inception_Module_v1(112+48, 96, 64)
    self.c3 = Inception_Module_v1(96+64, 80, 80)
    self.c4 = Inception_Module_v1(80+80, 48, 96)
    self.c5 = Downsample_Module(48+96, 96)

    self.d1 = Inception_Module_v1(96+48+96, 176, 160)
    self.d2 = Inception_Module_v1(176+160, 176, 160)
    self.d3 = nn.AvgPool2d(kernel_size=7) # output shape [64, 176+160, 1, 1]
    self.d4 = nn.Sequential(
        nn.Flatten(),
        nn.Linear(176+160, 10)
    )
    
  def forward(self, x):
    x = self.a(x)
    # print(x.shape)
    x = self.b1(x)
    # print(x.shape)
    x = self.b2(x)
    # print(x.shape)
    x = self.b3(x)
    # print(x.shape)
    x = self.c1(x)
    # print(x.shape)
    x = self.c2(x)
    # print(x.shape)
    x = self.c3(x)
    # print(x.shape)
    x = self.c4(x)
    # print(x.shape)
    x = self.c5(x)
    # print(x.shape)
    x = self.d1(x)
    # print(x.shape)
    x = self.d2(x)
    # print(x.shape)
    x = self.d3(x)
    # print(x.shape)
    x = self.d4(x)
    # print(x.shape)
    # print(x)
    return x

class miniGoogleNet_v2(nn.Module):
  def __init__(self):
    super(miniGoogleNet_v2, self).__init__()
    self.a = Conv_Module(3, 96, 3, 1, 1)

    self.b1 = Inception_Module_v2(96, 32, 32)
    self.b2 = Inception_Module_v2(32+32, 32, 48)
    self.b3 = Downsample_Module(32+48, 80)  # output channels 80+(32+48)

    self.c1 = Inception_Module_v2(80+32+48, 112, 48)
    self.c2 = Inception_Module_v2(112+48, 96, 64)
    self.c3 = Inception_Module_v2(96+64, 80, 80)
    self.c4 = Inception_Module_v2(80+80, 48, 96)
    self.c5 = Downsample_Module(48+96, 96)

    self.d1 = Inception_Module_v2(96+48+96, 176, 160)
    self.d2 = Inception_Module_v2(176+160, 176, 160)
    self.d3 = nn.AvgPool2d(kernel_size=7) # output shape [64, 176+160, 1, 1]
    self.d4 = nn.Sequential(
        nn.Flatten(),
        nn.Linear(176+160, 10)
    )
    
  def forward(self, x):
    x = self.a(x)
    # print(x.shape)
    x = self.b1(x)
    # print(x.shape)
    x = self.b2(x)
    # print(x.shape)
    x = self.b3(x)
    # print(x.shape)
    x = self.c1(x)
    # print(x.shape)
    x = self.c2(x)
    # print(x.shape)
    x = self.c3(x)
    # print(x.shape)
    x = self.c4(x)
    # print(x.shape)
    x = self.c5(x)
    # print(x.shape)
    x = self.d1(x)
    # print(x.shape)
    x = self.d2(x)
    # print(x.shape)
    x = self.d3(x)
    # print(x.shape)
    x = self.d4(x)
    # print(x.shape)
    # print(x)
    return x

# for X,y in train_dataloader:
#   x = X
#   break
# test_down = Inception_Module(3, 4, 3)
# test_res = test_down(x)
# print(x.shape)
# print(test_res.shape)

model0 = miniGoogleNet_v0().to(device)
model1 = miniGoogleNet_v1().to(device)
model2 = miniGoogleNet_v2().to(device)
# print(model)

loss_fn = nn.CrossEntropyLoss()
# print(model0.parameters())
# optimizer = torch.optim.SGD(model.parameters(), lr=1e-3)
optimizer0 = torch.optim.Adam(model0.parameters(), lr=1e-3, betas=(0.9, 0.999), eps=1e-8, weight_decay=0, amsgrad=False)
optimizer1 = torch.optim.Adam(model1.parameters(), lr=1e-3, betas=(0.9, 0.999), eps=1e-8, weight_decay=0, amsgrad=False)
optimizer2 = torch.optim.Adam(model2.parameters(), lr=1e-3, betas=(0.9, 0.999), eps=1e-8, weight_decay=0, amsgrad=False)

def train(dataloader, model, loss_fn, optimizer):
  size = len(dataloader.dataset)
  model.train()
  for batch, (X, y) in enumerate(dataloader):
    X, y = X.to(device), y.to(device)

    pred = model(X)
    loss = loss_fn(pred, y)

    optimizer.zero_grad() # set_to_none=False
    loss.backward()  
    optimizer.step()  # update the parameters in neural network

    if batch % 100 == 0:
      loss, current = loss.item(), batch*len(X)
      print(f"loss: {loss:>7f} [{current:>5d}/{size:>5d}]")

def test(dataloader, model, loss_fn):
  size = len(dataloader.dataset)
  num_batches = len(dataloader)
  model.eval()
  test_loss, correct = 0,0
  with torch.no_grad():
    for X, y in dataloader:
      X, y = X.to(device), y.to(device)
      pred = model(X)
      test_loss += loss_fn(pred, y).item()
      correct += (pred.argmax(1) == y).type(torch.float).sum().item()
  test_loss /= num_batches
  correct /= size
  print(f"Test Error: \n Accuracy: {(100*correct):>0.1f}%, Avg loss: {test_loss:>8f}\n")
  return correct

epochs = 30
time0 = []
acc0 = []
for i in range(epochs):
  print(f"Epoch {i+1}\n------------------------")
  starttime = time.time()
  train(train_dataloader, model0, loss_fn, optimizer0)
  test_acc = test(test_dataloader, model0, loss_fn)
  acc0.append(test_acc)
  torch.cuda.synchronize()
  endtime = time.time()
  print(endtime-starttime)
  time0.append(endtime-starttime)
print(time0)
print(acc0)
print("Done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
time1 = []
acc1 = []
for i in range(epochs):
  print(f"Epoch {i+1}\n------------------------")
  starttime = time.time()
  train(train_dataloader, model1, loss_fn, optimizer1)
  test_acc = test(test_dataloader, model1, loss_fn)
  acc1.append(test_acc)
  torch.cuda.synchronize()
  endtime = time.time()
  print(endtime-starttime)
  time1.append(endtime-starttime)
print(time1)
print(acc1)
print("Done1!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
time2 = []
acc2 = []
for i in range(epochs):
  print(f"Epoch {i+1}\n------------------------")
  starttime = time.time()
  train(train_dataloader, model2, loss_fn, optimizer2)
  test_acc = test(test_dataloader, model2, loss_fn)
  acc2.append(test_acc)
  torch.cuda.synchronize()
  endtime = time.time()
  print(endtime-starttime)
  time2.append(endtime-starttime)
print(time2)
print(acc2)
print("Done2!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")

torch.save(model.state_dict, 'mini_v1.pth')

for name in model.state_dict():
  print(name)
print(model.state_dict()['a.a.0.weight'].shape)

print(model.state_dict()['a.a.0.bias'].shape)
print(model.state_dict()['a.a.1.weight'].shape)
print(model.state_dict()['a.a.1.bias'].shape)
print(model.state_dict()['b1.a1.a.0.weight'].shape)
print(model.state_dict()['b1.a1.a.0.bias'].shape)
print(model.state_dict()['b1.a1.a.1.weight'].shape)
print(model.state_dict()['b1.a1.a.1.bias'].shape)
print(model.state_dict()['b1.a2.a.0.weight'].shape)
print(model.state_dict()['b1.a2.a.0.bias'].shape)

print(model.get_parameter)